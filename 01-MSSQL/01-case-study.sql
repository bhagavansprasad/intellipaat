CREATE DATABASE casestudies
use casestudies

DROP TABLE Product
DROP TABLE Location
DROP TABLE fact

select * from Information_schema.Columns where table_name = 'fact'

--1. Display the number of states present in the LocationTable.
	SELECT COUNT(DISTINCT Area_Code) AS StateCount FROM Location

--2. How many products are of regular type?
	SELECT COUNT(Type) AS ProductCount FROM Product WHERE Type = 'Regular'

--3. How much spending has been done on marketing of product ID 1?
	SELECT SUM(Marketing) AS Marketing_Spend FROM fact WHERE ProductId = 1

--4. What is the minimum sales of a product?
	SELECT MIN(Sales) AS Minimum_Sale FROM fact

--5. Display the max Cost of Good Sold (COGS).
	SELECT MAX(COGS) AS Minimum_Sale FROM fact

--6. Display the details of the product where product type is coffee.
	SELECT * FROM Product WHERE Product_Type='Coffee'

--7. Display the details where total expenses are greater than 40.
	SELECT Date, ProductId, Total_Expenses FROM fact WHERE Total_Expenses > 40 ORDER BY Total_Expenses ASC

--8. What is the average sales in area code 719?
	SELECT AVG(Sales) AS Average_Sale_719_Area FROM fact WHERE Area_Code = 719
	
--9. Find out the total profit generated by Colorado state
	SELECT SUM(F.Profit) AS Colorado_Profit
		FROM Location AS L LEFT JOIN Fact AS F 
		ON F.Area_Code=L.Area_code
		WHERE L.State='Colorado'

--10. Display the average inventory for each product ID.
	SELECT ProductId, AVG(Inventory) AS AvarageInventory
		FROM fact
		GROUP BY ProductId

--11. Display state in a sequential order in a Location Table.
	SELECT State FROM Location 
		GROUP BY State
		ORDER BY State ASC

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
	SELECT ProductId, 
		AVG(Budget_Margin) AS AverageBudget
		FROM fact
		GROUP BY ProductId 
		HAVING AVG(Budget_Margin) > 100
		ORDER BY AverageBudget ASC

--13. What is the total sales done on date 2010-01-01?
	SELECT SUM(Sales) as TotalSales FROM Fact WHERE Date='2010-01-01'

--14. Display the average total expense of each product ID on an individual date.
	SELECT ProductId, Date, AVG(Total_Expenses) AS AvgTotExpenses
		FROM fact
		GROUP BY ProductId, Date
		ORDER BY ProductId, Date

--15. Display the table with the following attributes such as date, productID, 
--    product_type, product, sales, profit, state, area_code.
	SELECT F.Date, F.ProductID, P.Product_Type, P.Product, F.Sales, F.Profit, L.State, L.Area_Code
		FROM fact AS F 
		LEFT JOIN Product AS P
		ON F.ProductID = P.ProductID
		LEFT JOIN Location AS L
		ON F.Area_Code = L.Area_Code
		ORDER BY F.Date

--16. Display the rank without any gap to show the sales wise rank.
	SELECT ProductId, Date, Sales,
		Dense_RANK() OVER(ORDER BY Sales DESC) AS Ranks
		FROM fact

--17. Find the state wise profit and sales.
	SELECT L.State,
		SUM(F.Profit) as TotProfit,
		SUM(F.Sales) as TotSales
		FROM Location AS L
		LEFT JOIN fact AS F
		ON L.Area_code = F.Area_code
		GROUP BY L.State
		ORDER BY L.State

--18. Find the state wise profit and sales along with the product name.
	SELECT L.State, P.Product,
		SUM(F.Profit) as TotProfit,
		SUM(F.Sales) as TotSales
		FROM Location AS L
		LEFT JOIN fact AS F
		ON L.Area_code = F.Area_code
		LEFT JOIN  Product AS P
		ON P.ProductId = F.ProductId
		GROUP BY L.State, P.Product
		ORDER BY L.State, P.Product

--19. If there is an increase in sales of 5%, calculate the increased sales.
	SELECT 
	SUM(F.Sales) AS TotSales,
	SUM(F.Sales) + (SUM(F.Sales)*5/100) AS 'TotaSales+5%'
	FROM fact AS F
	GROUP BY F.Sales

--20. Find the maximum profit along with the product ID and producttype.
	SELECT F.ProductId, P.Product_Type,
		MAX(F.Profit) AS MaxProfit
		FROM fact AS F
		LEFT JOIN Product AS P
		ON F.ProductId = P.ProductId
		GROUP BY F.ProductId, P.Product_Type
		ORDER BY F.ProductId, P.Product_Type

--21. Create a stored procedure to fetch the result according to the product type from Product Table.
	CREATE OR ALTER PROCEDURE get_results
	AS
		SELECT * FROM Product
		ORDER BY Product_Type ASC
	GO
	EXEC get_results

--22. Write a query by creating a condition in which if the total expenses is less than
--    60 then it is a profit or else loss.
	SELECT *, IIF(F.Total_Expenses < 60, 'PROFIT', 'LOSS') AS Status
	FROM fact AS F
	ORDER BY ProductId

--23. Give the total weekly sales value with the date and product ID details. Use
--    roll-up to pull the data in hierarchical order.
	SELECT F.ProductId, F.Date, 
		datepart(wk, F.Date) AS Week,
		SUM(F.Sales) AS TotWeeklySales
		FROM fact AS F
		GROUP BY ROLLUP(F.ProductId, F.Date)
		ORDER BY F.ProductId, F.Date

--24. Apply union and intersection operator on the tables which consist of
--    attribute area code.
	SELECT Area_Code FROM Location AS L
	UNION
		SELECT Area_Code FROM fact AS F
		ORDER BY Area_code ASC

	SELECT Area_Code FROM Location
	INTERSECT
		SELECT Area_Code FROM fact
		ORDER BY Area_code ASC

--25. Create a user-defined function for the product table to fetch a particular
--    product type based upon the user’s preference.
	CREATE OR ALTER PROCEDURE get_results_by_ptype
	@ptype VARCHAR(64)
	AS
		SELECT * FROM Product
			WHERE Product_Type = @ptype
			ORDER BY Product_Type ASC
	GO
	EXEC get_results_by_ptype 'Coffee'

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE Product set Product_Type='Tea' WHERE Product_Type = 'Coffee' and ProductId = 1
		--COMMIT TRANSACTION 
		ROLLBACK TRANSACTION
		Print 'Transaction is rollbacked'
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		Print 'Transaction is rollback'
	END CATCH

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
	SELECT Date, ProductId, Sales
	FROM fact
	WHERE (Sales >= 100 AND SALES <= 200)
	ORDER BY ProductId

--28. Delete the records in the Product Table for regular type.
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM Product WHERE Type = 'Regular'
		--COMMIT TRANSACTION 
		ROLLBACK TRANSACTION
		Print 'Transaction is rollbacked, BECAUSE I DONT WANT TO LOOSE THE DATA'
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		Print 'Transaction is rollbacked, DUE TO EXCEPTION'
	END CATCH

--29. Display the ASCII value of the fifth character from the columnProduct
	SELECT Product, SUBSTRING(Product, 5, 1) AS Fifth_Char, ASCII(SUBSTRING(Product, 5, 1)) AS ASSCII FROM Product

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
	SELECT ProductId, 
		AVG(Budget_Margin) AS AverageBudget
		FROM fact
		GROUP BY ProductId 
		HAVING AVG(Budget_Margin) > 100
		ORDER BY AverageBudget ASC

--Product 13 rows  --Location - 156 Rows      --fact - 4200 rows   
--	ProductId      --	Area_Code             --	Date
--	Product_Type   --	State                 --	ProductId
--	Product        --	Market                --	Profit
--	Type           --	Market_Size           --	Sales
                                              --	Margin
                                              --	COGS
                                              --	Total_Expenses
                                              --	Marketing
                                              --	Inventory
                                              --	Budget_Profit
                                              --	Budget_COGS
                                              --	Budget_Margin
                                              --	Budget_Sales
                                              --	Area_Code

